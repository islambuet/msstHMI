<div class="row mt-2">
    <div class="col-12" style="height: 400px">
        <div id="chart_statistics_bin">Single bin chart</div>
    </div>
</div>
<footer id="footer" class="container-fluid">
    <%- include('../components/statistics_footer') %>
</footer>
<script>
    /* global basic_info */
    /* global ipcRenderer */
    /* global getPaginationHtml */
    const Highcharts = require('highcharts/highstock')
    require('highcharts/modules/exporting')(Highcharts);
    require('highcharts/modules/export-data')(Highcharts);
    function systemPageLoaded(){
        if(basic_info['connected']){
            let requestData=[
                {'name':'statistics_counter','params':{'per_page':1}},
            ];
            ipcRenderer.send("sendRequestToServer", "getStatisticsCounterLast",{},requestData);//send request now
            setInterval(() => {
                ipcRenderer.send("sendRequestToServer", "getStatisticsCounterLast",{},requestData);
            }, 60000);
        }
    }
    ipcRenderer.on("getStatisticsCounterLast", function(e, jsonObject) {
        if(jsonObject['data']['statistics_counter']['records'].length>0){
            let shiftInfo=jsonObject['data']['statistics_counter']['records'][0];
            let shift_starting_time = shiftInfo['created_at_timestamp'];
            let to_timestamp = moment().unix();
            let diff = moment(shift_starting_time*1000).minutes()% 3;

            let shift_starting_time_round = shift_starting_time - diff * 60- moment(shift_starting_time*1000).seconds();

            let requestData=[
                {'name':'statistics_bins','params':{'from_timestamp': shift_starting_time_round,'to_timestamp': to_timestamp,'bin_id':basic_info['pageParams']['bin']['bin_id'],'per_page':240}},
            ];
            ipcRenderer.send("sendRequestToServer", "getStatisticsBins",{},requestData);//send request now
        }
    })
    ipcRenderer.on("getStatisticsBins", function(e, jsonObject) {
        let statistics_bin=jsonObject['data']['statistics_bins']['records'];
        statistics_bin.sort((a,b) => a['created_at_timestamp']-b['created_at_timestamp']);
        let scs=basic_info['scs'];
        for(let key in scs){
            scs[key]['total']=0;
            scs[key]['data']=[];
        }
        let chart_categories = [];
        for(let i=0;i<statistics_bin.length;i++) {
            let created_at_timestamp = statistics_bin[i]["created_at_timestamp"];
            chart_categories.push(moment.unix(created_at_timestamp).format("MMM D, H:mm"));
            for(let key in scs){
                let value=Number(statistics_bin[i]['sc'+scs[key]['value']]);
                scs[key]['total']+=value;
                scs[key]['data'].push(value)
            }
        }
        let chart_series=Object.values(scs).sort((a, b) => a.total - b.total);
        Highcharts.chart("chart_statistics_bin", {
            chart: {
                type: "column",
            },
            title: {
                text: "Hourly - Detail",
            },
            xAxis: {
                type: "datetime",
                categories: chart_categories,
            },
            yAxis: {
                min: 0,
                title: {
                    text: "",
                },
            },
            tooltip: {
                formatter: function () {
                    return '<b>' + moment(this.x).format("YYYY-MM-DD") + '</b><br/>' +
                        this.series.name + ': ' + this.y + '<br/>' +
                        'Total: ' + this.point.stackTotal;
                }
            },
            legend: {
                reversed: true,
            },
            plotOptions: {
                series: {
                    stacking: "normal",
                    dataLabels: {
                        enabled: true,
                    },
                },
            },
            exporting: {
                enabled: true,
                buttons: {
                    contextButton: {
                        menuItems: ['downloadCSV', 'separator', 'downloadPDF', 'downloadPNG']
                    }
                }
            },
            credits: {
                enabled: false
            },
            series: chart_series.map((item) => ({
                name: item['label'],
                data: item['data'],
                color: item['color']
            })),
        });
    })
</script>